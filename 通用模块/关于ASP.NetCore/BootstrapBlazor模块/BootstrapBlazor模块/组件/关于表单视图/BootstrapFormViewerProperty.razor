@namespace BootstrapBlazor.Components
@inherits ComponentBase
@typeparam Model
@using System.Media
@using System.Reflection
@using System.DataFrancis
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel.DataAnnotations.Schema;

@{
    var propertyTitle = RenderPropertyInfo.Name;
    var name = propertyTitle.EndsWith(':') ? propertyTitle : propertyTitle + ":";
    var property = RenderPropertyInfo.Property;
    var propertyType = property.PropertyType;
    var renderPreference = RenderPropertyInfo.RenderPreference;
    var format = renderPreference.Format;
    var isReadOnly = RenderPropertyInfo.IsReadOnly;
    #region 获取渲染特性
    Obj? GetRenderAttribute<Obj>()
    where Obj : Attribute
    => property!.GetCustomAttribute<Obj>();
    #endregion
    #region 抛出异常
    NotSupportedException Throw(Enum renderMode)
    => new($"无法识别属性{name}的类型{propertyType}的渲染模式{renderMode}");
    #endregion
}

<div class="bootstrapFormViewerPropertyContainer">
    <div class="bootstrapFormViewerPropertyItem">
        @if (RenderPropertyInfo.PreviewFilePropertyDescribe is { } previewFilePropertyDescribe)
        {
            var model = RenderPropertyInfo.FormModel;
            var files = previewFilePropertyDescribe.GetFiles(model);
            <div class="bootstrapFormViewerPropertyContainer">
                <div class="bootstrapFormViewerPropertyLabel">@name</div>
                @if (isReadOnly)
                {
                    <BootstrapFileViewer Files="files">
                        <RenderFile Context="renderFile">
                            @{
                                var attributes =
                                renderFile.File.MediumFileType is not MediumFileType.NotMediumFile ?
                                new Dictionary<string, object>()
                {
                    ["onclick"] = renderFile.OpenPreview
                } : null;
                            }
                            <BootstrapSingleFile RenderFileInfo="renderFile" Attributes="attributes" />
                        </RenderFile>
                    </BootstrapFileViewer>
                }
                else
                {
                    var renderUpload = property.GetCustomAttribute<RenderUploadAttribute>();
                    var uploadFileOptions = renderUpload is null ?
                    new UploadFileOptions() :
                    new()
                    {
                        MaxAllowedSize = renderUpload.MaxAllowedSize
                    };
                    <BootstrapFileUpload Accept="@renderUpload?.Accept" OnUpload="OnUpload" InUpload="RenderPropertyInfo.InUpload"
                                         Multiple="previewFilePropertyDescribe.Multiple" InitialFiles="files" @key=model
                                         UploadButtonText="@renderUpload?.UploadButtonText" UploadFileOptions="uploadFileOptions" />
                }
            </div>
        }
        else
        {
            @if (isReadOnly)
            {
                #region 获取文本值的本地函数
                string? GetText()
                {
                    var value = RenderPropertyInfo.Value;
                    return (value, format) switch
                    {
                        (Enum @enum, _) => @enum.GetDescription(),
                        (IFormattable formattable, var formatText) => (formattable, formatText) switch
                        {
                            (decimal num, null) => num.ToString(Tool.FormattedNumCommon),
                            (DateTimeOffset date, null) => date.ToString("d"),
                            (var f, var ff) => formattable.ToString(formatText, null)
                        },
                        var (v, _) => v?.ToString()
                    };
                }
                #endregion
                var text = GetText();
                <div class="bootstrapFormViewerPropertyContainer">
                    <div class="bootstrapFormViewerPropertyLabel">@name</div>
                    <pre class="bootstrapFormViewerPropertyText">
                    <TextRenderingSimple Value="text" />
                    </pre>
                </div>
            }
            else
            {
                var trueType = Nullable.GetUnderlyingType(propertyType) ?? propertyType;
                @switch ((trueType, trueType != propertyType))
                {
                    case (var t, _) when t == typeof(string):
                        var valueText = RenderPropertyInfo.BindValue<string>();
                        var stringRender = renderPreference.RenderString;
                        @switch (stringRender)
                        {
                            case FormStringRender.Default or FormStringRender.SingleLineText:
                                <BootstrapInput TValue="string" ShowLabel="true" DisplayText="@name" @bind-Value=valueText.Value />
                                break;
                            case FormStringRender.LongText:
                                <Textarea ShowLabel="true" DisplayText="@name" @bind-Value=valueText.Value rows="@(renderPreference.RenderLongTextRows)" />
                                break;
                            case FormStringRender.Password:
                                <BootstrapInput ShowLabel="true" DisplayText="@name" @bind-Value=valueText.Value type="password" />
                                break;
                            case var r:
                                throw Throw(r);
                        }
                        break;
                    case (var t, _) when t.IsNum():
                        var numRender = renderPreference.RenderNum;
                        #region 渲染字段
                        void Render<T>()
                        where T : struct, IParsable<T>
                        {
                            @switch (numRender)
                            {
                                case FormNumRender.Default or FormNumRender.Num:
                                    var value = RenderPropertyInfo.BindValue<T>();
                                    <BootstrapInputNumber TValue="T" ShowLabel="true"
                                                          DisplayText="@name" @bind-Value=value.Value
                                                          FormatString="@(format??Tool.FormattedNumCommon)" />
                                    break;
                                case FormNumRender.Grade when typeof(T) == typeof(double):
                                    var v = RenderPropertyInfo.BindValue<double>();
                                    <div>
                                        <div class="form-label bootstrapFormViewerPropertyLabel">@name</div>
                                        <Rate @bind-Value=v.Value />
                                    </div>
                                    break;
                                case var r:
                                    throw Throw(r);
                            }
                        }
                        #endregion
                        switch (t)
                        {
                            case var type when type == typeof(int):
                                Render<int>();
                                break;
                            case var type when type == typeof(long):
                                Render<long>();
                                break;
                            case var type when type == typeof(double):
                                Render<double>();
                                break;
                            case var type when type == typeof(decimal):
                                Render<decimal>();
                                break;
                            case var _:
                                throw Throw(numRender);
                        }
                        break;
                    case (var t, _) when t == typeof(bool):
                        var boolRender = renderPreference.RenderBool;
                        var trueDescribe = "打开";
                        var flaseDescribe = "关闭";
                        var valueBool = RenderPropertyInfo.BindValue<bool>();
                        switch (boolRender)
                        {
                            case FormBoolRender.Default or FormBoolRender.Radio:
                                var boolSelect = new SelectedItem[]
                                {
        new ()
        {
        Text=trueDescribe,
        Value=bool.TrueString,
        },
        new()
        {
        Text=flaseDescribe,
        Value=bool.FalseString,
        }
                                };
                                <RadioList Items="boolSelect" TValue="bool" ShowLabel="true" DisplayText="@name" @bind-Value=valueBool.Value />
                                break;
                            case FormBoolRender.Switch:
                                <Switch ShowLabel="true" DisplayText="@name" OnText="@trueDescribe" OffText="@flaseDescribe" @bind-Value=valueBool.Value />
                                break;
                            case var r:
                                throw Throw(r);
                        }
                        break;
                    case ({ IsEnum: true } t, var isNullStruct):
                        var enumRender = renderPreference.RenderEnum;
                        #region 渲染枚举
                        void RenderEnum<T>()
                        {
                            Func<T, Task>? onEnumChange =
                            RenderPropertyInfo.OnPropertyChange is null ?
                            null :
                            async value =>
                            {
                                var enumValue = value.To(RenderPropertyInfo.ValueType);
                                await RenderPropertyInfo.OnPropertyChange(enumValue);
                            };
                            var enumSelect = Enum.GetNames(t).
                            Select(x => t.GetField(x)!).
                            Where(x => !x.IsDefined<NotMappedAttribute>()).
                            Select(x =>
                            {
                                var attribute = x.GetCustomAttribute<RenderDataAttribute>();
                                return (x.GetValue<T>(), attribute?.Name ?? x.Name, attribute?.Order ?? 0);
                            }).
                            OrderBy(x => x.Item3).
                            Select(x => new SelectedItem()
                                {
                                    Text = x.Item2,
                                    Value = x.Item1?.ToString()!
                                }).ToArray();
                            enumSelect = isNullStruct ?
                            enumSelect.Prepend(new() { Text = "无", Value = null! }).ToArray() :
                            enumSelect;
                            var valueEnum = RenderPropertyInfo.BindValue<T>();
                            @switch (enumRender)
                            {
                                case FormEnumRender.Default or FormEnumRender.Radio:
                                    <RadioList Items="enumSelect" TValue="T" ShowLabel="true" DisplayText="@name" @bind-Value=valueEnum.Value OnValueChanged="onEnumChange!" />
                                    break;
                                case FormEnumRender.Select:
                                    <Select Items="enumSelect" TValue="T" ShowLabel="true" DisplayText="@name" @bind-Value=valueEnum.Value OnValueChanged="onEnumChange!" />
                                    break;
                                case var r:
                                    throw Throw(r);
                            }
                        }
                        #endregion
                        if (isNullStruct)
                        {
                            RenderEnum<int?>();
                        }
                        else
                        {
                            RenderEnum<int>();
                        }
                        break;
                    case (var t, var isNullStruct) when t == typeof(DateTimeOffset):
                        var formatDate = format.IsVoid() ? "d" : format;
                        #region 渲染日期
                        void RenderDateTime<T>()
                        {
                            var valueDate = RenderPropertyInfo.BindValue<T>();
                            <DateTimePicker @bind-Value=valueDate.Value ShowLabel="true"
                                            DisplayText="@name" DateFormat="@formatDate" />
                        }
                        #endregion
                        if (isNullStruct)
                        {
                            RenderDateTime<DateTimeOffset?>();
                        }
                        else
                        {
                            RenderDateTime<DateTimeOffset>();
                        }
                        break;
                    case var t:
                        throw new NotSupportedException($"无法识别属性{name}的类型{t}，不能生成表单");
                }
            }
        }
    </div>
    @if (GetRenderAttribute<DescribeAttribute>() is { } describe)
    {
        #region 渲染本地函数
        RenderFragment render = __builder =>
        {
            <pre class="bootstrapFormViewerPropertyItem bootstrapFormViewerPropertyDescription wrap">@describe.Describe</pre>
        };
        #endregion
        if (describe.CollapseTitle is { } title)
        {
            <Collapse>
                <CollapseItems>
                    <CollapseItem Text="@title">
                        @render
                    </CollapseItem>
                </CollapseItems>
            </Collapse>
        }
        else
        {
            @render
        }
    }
</div>
