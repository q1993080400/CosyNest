@namespace BootstrapBlazor.Components
@using Microsoft.AspNetCore;
@inherits ComponentBase
@inject IJSWindow JSWindow
@using System.IOFrancis.FileSystem

<MediaViewer MediaSource="MediaSource">
    <RenderComponent>
        @if (RenderComponent is { })
        {
            @RenderComponent(context.RenderElement)
        }
        else
        {
            <div class="mediaViewerContainer">
                @foreach (var item in context.RenderElement)
                {
                    @item
                }
            </div>
        }
        <Modal @ref="Modal">
            <BootstrapBlazor.Components.ModalDialog IsCentered=true Size="Size.Medium" IsScrolling="true" ShowCloseButton=false ShowHeader=false>
                <BodyTemplate>
                    <div id="@CarouselID">
                        <Carousel ShowIndicators=false>
                            @foreach (var item in Medias(context))
                            {
                                var uri = item.MediaUri;
                                <CarouselItem Interval="1000*600" @key=item>
                                    <NineGrids>
                                        @switch (item.MediaSourceType)
                                        {
                                            case MediaSourceType.WebImage:
                                                <img src="@uri" class="mediaPreview" />
                                                break;
                                            case MediaSourceType.WebVideo:
                                                var format = ToolPath.SplitPathFile(uri).Extended switch
                                                {
                                                    "opus" or "ogv" => "video/ogg",
                                                    "mkv" => "video/x-matroska",
                                                    "m3u8" => "application/x-mpegURL",
                                                    _ => "video/mp4"
                                                };
                                                <VideoPlayer Height="500" Url="@uri" MineType="@format" />
                                                break;
                                        }
                                    </NineGrids>
                                </CarouselItem>
                            }
                        </Carousel>
                    </div>
                </BodyTemplate>
                <FooterTemplate>
                    @{
                        async Task OnClickWithoutRender()
                        {
                            await Modal!.Close();
                            await Task.Delay(100);
                            await context.QuitPreview();
                        }
                    }
                    <CompactCentered>
                        <Button OnClick="OnClickWithoutRender">关闭</Button>
                    </CompactCentered>
                </FooterTemplate>
            </BootstrapBlazor.Components.ModalDialog>
        </Modal>
    </RenderComponent>
    <RenderCover>
        @{
            var newContext = ConvertRenderCoverInfo(context);
        }
        @if (RenderCover is { })
        {
            @RenderCover(newContext)
        }
        else
        {
            var media = newContext.MediaSource;
            <div @onclick=CreateRazor.EventCallbackNotRefresh(newContext.PreviewEvent)>
                <AutoPlayButton AddPlayButton=@(media.MediaSourceType is MediaSourceType.WebVideo) ExtraCSSButton="coverPlayButton">
                    <img src="@media.CoverUri" class="cover" />
                </AutoPlayButton>
            </div>
        }
    </RenderCover>
</MediaViewer>